
PARSER_BEGIN(Pascal)
import java.io.*;
public class Pascal {

  public static void main(String args[]) throws ParseException,IOException {
    
    Pascal parser = new Pascal(new FileInputStream(args[0]));
    parser.Programa();
  }

}


PARSER_END(Pascal)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <PROGRAM: "program">
| <INTEIRO: "integer">
| <REAL: "real">
| <VAR: "var">
| <OF: "of">
| <FUNCTION: "function">
| <PROCEDURE: "procedure">
| <LBRACE:"(">
| <RBRACE: ")">
| <SEMI: ";">
| <DOT: ":">
| <ARRAY: "array">
| <LCOL: "[">
| <RCOL: "]">
| <NUM: ["0" - "9"](["0" - "9"])* >
| <TRPOINT: ".." >
| <BEGIN: "begin" >
| <END: "end" >
| <ATRIB: ":=" >
| <IF: "if">
| <THEN: "then">
| <ELSE: "else">
| <WHILE: "while">
| <DO: "do">
|<OPERADOR_RELACIONAL: ("=" | "<>" | "<" | "<=" | ">=" | ">") >
| <NOT: "not" >
| <COMMA: ",">
}

TOKEN :
{
 <OPERADOR_MULTIPLICATIVO: ("*"|"/"|"div"|"mod"|"and")>
|
<OPERADOR_ADITIVO: ("+"| "-" | "or")>
|
  < ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>
}



void Programa () :
{}
{ <PROGRAM> <ID> 
  <LBRACE> lista_de_identificadores() <RBRACE> <SEMI> 
  //Declaracoes() 
   Declaracoes_de_subprogramas() "."
  <EOF> 
}
	

void lista_de_identificadores():
{}
{
  <ID> Lista2()
}

void Lista2():
{}
{
 ("," <ID> Lista2())?
}

void Declaracoes() :
{}
{
   Declaracoes2()
}

void Declaracoes2() :
{}
{
  ( <VAR> lista_de_identificadores() <DOT> type()  )
}

void types():
{}
{
  <INTEIRO> | <REAL>
}

void type():
{}
{
  <ARRAY> <LCOL> <NUM> <TRPOINT> <NUM> <RCOL> <OF> types() | types()
}

void Declaracoes_de_subprogramas():
{}
{
  (Declaracao_de_subprograma() <SEMI> Declaracoes_de_subprogramas() )?
}

void Declaracao_de_subprograma():
{}
{
  Cabecalho_de_subprograma() | Declaracoes() | Enunciado_composto()
}

void Cabecalho_de_subprograma():
{}
{
  <FUNCTION> <ID> Argumentos() <DOT> types() |
  <PROCEDURE> <ID> Argumentos()

}

void Argumentos():
{}
{
  <LBRACE> Lista_de_parametros() <RBRACE>
}

void Lista_de_parametros():
{}
{
  lista_de_identificadores() <DOT> type() Lista_de_parametros2()
}

void Lista_de_parametros2():
{}
{
  (lista_de_identificadores() <DOT> type() Lista_de_parametros2())?
}

void Enunciado_composto():
{}
{
  <BEGIN> Enunciados_opcionais() <END>
}

void Enunciados_opcionais():
{}
{
  (Lista_de_enunciados() )?
}

void Lista_de_enunciados():
{}
{
  Enunciado() Lista_de_enunciados2()
}

void Lista_de_enunciados2():
{}
{
  (<SEMI> Enunciado() Lista_de_enunciados2() )?
}

void Enunciado():
{}
{
  <ID> Enunciado2() | Enunciado_composto() | <IF> Expressao() <THEN> Enunciado() <ELSE> Enunciado() |
  <WHILE> Expressao() <DO> Enunciado()
}

void Enunciado2():
{}
{
  Variavel() <ATRIB> Expressao() | Chamada_de_procedimento()
}

void Variavel():
{}
{
  (<LCOL> Expressao() <RCOL>)?
}

void Chamada_de_procedimento():
{}
{
  (<LBRACE> Lista_de_expressoes() <RBRACE>)?
}

void Expressao():
{}
{
  Expressao_simples() Expressao2()
}
void Expressao2():
{}
{
  (<OPERADOR_RELACIONAL> Expressao_simples() )?
}

void Lista_de_expressoes():
{}
{
  Expressao() Lista_de_expressoes2()
}

void Lista_de_expressoes2():
{}
{
  (<COMMA> Expressao() Lista_de_expressoes2() )?
}

void Expressao_simples():
{}
{
  Termo() Expressao_simples2()
}

void Expressao_simples2():
{}
{
  (<OPERADOR_ADITIVO> Termo() Expressao_simples2() )?
}


void Termo():
{}
{
  Fator() Termo2()
}

void Termo2():
{}
{
  ( <OPERADOR_MULTIPLICATIVO> Fator() Termo2() )?
}

void Fator():
{}
{
  <ID> Fator2() |
  <NUM> |
  <LBRACE> Expressao() <RBRACE> |
  <NOT> Fator()
}

void Fator2():
{}
{
  (<LBRACE> Lista_de_expressoes() <RBRACE> )?
}