options
{
  LOOKAHEAD = 3;
}
PARSER_BEGIN(Pascal)
import java.io.*;
public class Pascal {

  public static void main(String args[]) throws ParseException,IOException {
    
    Pascal parser = new Pascal(new FileInputStream(args[0]));
    parser.Programa();
  }

}


PARSER_END(Pascal)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <PROGRAM: "program">
| <INTEIRO: "integer">
| <REAL: "real">
| <VAR: "var">
| <OF: "of">
| <FUNCTION: "function">
| <PROCEDURE: "procedure">
| <LBRACE:"(">
| <RBRACE: ")">
| <SEMI: ";">
| <DOT: ":">
| <ARRAY: "array">
| <LCOL: "[">
| <RCOL: "]">
| <NUM: ["0" - "9"](["0" - "9"])* >
| <TRPOINT: ".." >
| <BEGIN: "begin" >
| <END: "end" >
| <ATRIB: ":=" >
| <IF: "if">
| <THEN: "then">
| <ELSE: "else">
| <WHILE: "while">
| <DO: "do">
|<OPERADOR_RELACIONAL: ("=" | "<>" | "<" | "<=" | ">=" | ">") >
| <NOT: "not" >
| <MAIS: "+">
| <MENOS: "-">
}

TOKEN :
{
 <OPERADOR_MULTIPLICATIVO: ("*"|"/"|"div"|"mod"|"and")>
|
<OPERADOR_ADITIVO: ("+"| "-" | "or")>
|
  < ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>

}



void Programa () :
{}
{ <PROGRAM> <ID> 
  <LBRACE> lista_de_identificadores() Declaracoes_de_subprogramas() <RBRACE> <SEMI> 
  Declaracoes() 
   Declaracoes_de_subprogramas() Enunciado_composto() "."
  <EOF> 
}
	

void lista_de_identificadores():
{}
{
  <ID> Lista2()
}

void Lista2():
{}
{
 ("," <ID> Lista2())?
}

void Declaracoes() :
{}
{
   ( <VAR> lista_de_identificadores() <DOT> type() <SEMI> Declaracoes2() )?
}

void Declaracoes2() :
{}
{
  ( <VAR> lista_de_identificadores() <DOT> type() <SEMI> Declaracoes2() )?
}

void types():
{}
{
  <INTEIRO> | <REAL>
}

void type():
{}
{
  <ARRAY> <LCOL> <NUM> <TRPOINT> <NUM> <RCOL> <OF> types() | types()
}

void Declaracoes_de_subprogramas():
{}
{
  Declaracoes_de_subprogramas2()
}

void Declaracoes_de_subprogramas2():
{}
{
  (declaracao_de_subprograma() )?
}

void declaracao_de_subprograma():
{}
{
  cabecalho_de_subprograma() Declaracoes() Enunciado_composto()
}

void cabecalho_de_subprograma():
{}
{
  <FUNCTION> <ID> argumentos() <DOT> types() <SEMI> | 
  <PROCEDURE> <ID> argumentos() <SEMI> 
}

void argumentos():
{}
{
  ( <LBRACE> lista_de_parametros() <RBRACE> )?
}

void lista_de_parametros():
{}
{
  lista_de_identificadores() <DOT> type() |
  lista_de_parametros2()
}

void lista_de_parametros2():
{}
{
  (  <DOT> lista_de_identificadores() <DOT> type() lista_de_parametros2())?
}

void Enunciado_composto():
{}
{
  <BEGIN> enunciados_opcionais() <END>
}

void enunciados_opcionais():
{}
{
  ( lista_de_enunciados() )?
}

void lista_de_enunciados():
{}
{
  enunciado() | lista_de_enunciados2()
}

void lista_de_enunciados2():
{}
{
 <DOT> enunciado() lista_de_enunciados()
}

void enunciado():
{}
{
  enunciado2() |
  variavel() <ATRIB> expressao() |
  chamada_de_procedimento() |
  Enunciado_composto()
}

void enunciado2():
{}
{
  <IF> expressao() <THEN> enunciado() <ELSE> enunciado() |
  <WHILE> expressao() <DO> enunciado()
}

void variavel():
{}
{
  <ID> | <ID> <LCOL> expressao() <RCOL>
}

void chamada_de_procedimento():
{}
{
  <ID> | <ID> <LBRACE> lista_de_expressoes() <RBRACE>
}

void lista_de_expressoes():
{}
{
  expressao() | lista_de_expressoes2()
}
void lista_de_expressoes2():
{}
{
  expressao() lista_de_expressoes()
}

void expressao():
{}
{
  expressao_simples() | expressao_simples() <OPERADOR_RELACIONAL> expressao_simples()
}

void expressao_simples():
{}
{
  termo() |
  sinal() termo() |
  expressao_simples2()
}

void expressao_simples2():
{}
{
   termo() <OPERADOR_ADITIVO> expressao_simples()
}

void termo():
{}
{
  fator() |
  termo2()
}

void termo2():
{}
{
  fator() <OPERADOR_MULTIPLICATIVO> termo2()
}

void fator():
{}
{
  <ID> |
  <ID> <LBRACE> lista_de_expressoes() <RBRACE> |
  <NUM>  |
  <LBRACE> expressao() <RBRACE> |
  <NOT> fator()
}

void sinal():
{}
{
  <MAIS> | <MENOS> 
}